# Form implementation generated from reading ui file 'C:\Users\doganuraydeniz\Desktop\untitled2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import threading
import time
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor

import pandas
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QDialog, QComboBox

data = None
columns = ['Product', 'Issue', 'Company', 'State', 'ZIP Code', 'Complaint ID']
# executor = ThreadPoolExecutor(max_workers=30)

def clear_null(df):
    start = time.time()
    df = df.dropna()
    df = df.reset_index(drop=True, inplace=False)
    print(f"Clear Null Time: {time.time()-start:.04f} sec.")
    return df


#df = clear_null(data)


# Clear rows with stop words
def clear_stopwords(stopwords_dict, df):
    start = time.time()

    df['Product'] = df['Product'].apply(lambda x: ' '.join([word for word in x.split()
                                                            if word not in stopwords_dict]))
    df['Issue'] = df['Issue'].apply(lambda x: ' '.join([word for word in x.split()
                                                        if word not in stopwords_dict]))

    print(f"Clear Stop Words Time: {time.time()-start:.04f} sec.")


# clear_stopwords(stopwords_dict, df)


# Clear punctuation in 3 columns with regex
def clear_punc(df):
    start = time.time()

    df['Product'] = df['Product'].str.replace(r'[^\w\s]+', '')
    df['Issue'] = df['Issue'].str.replace(r'[^\w\s]+', '')
    df['Company'] = df['Company'].str.replace(r'[^\w\s]+', '')

    print(f"Clear Punctuation Time: {time.time()-start:.04f} sec.")


# clear_punc(df)


# Write to csv file
def write_to_csv(df):
    start = time.time()
    df.to_csv('modified.csv', index=True)

    print(f"Write to File Time: {time.time()-start:.04f} sec.")


# write_to_csv(df)




class FileTableModel(QtCore.QAbstractTableModel):
    first_col: QComboBox

    def __init__(self, thread_results_data):
        super(FileTableModel, self).__init__()
        self._data = thread_results_data

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            colindex = index.column()
            rowindex = index.row()
            return self._data[rowindex][columns[colindex]]

    def rowCount(self, index):
        # The length of the outer list.

        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        if len(self._data) == 0:
            return len(columns)
        return len(self._data[0])-1


class ResultsTableModel(QtCore.QAbstractTableModel):
    first_col: QComboBox
    second_col: QComboBox

    def __init__(self, thread_results_data, first_col, second_col, visible_columns):
        super(ResultsTableModel, self).__init__()
        self._data = thread_results_data
        self.first_col = first_col
        self.visible_columns = visible_columns

        self.second_col = second_col

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            colindex = index.column()
            rowindex = index.row()
            row = self._data[rowindex]
            orijinal_sira1 = data[row[0]]
            orijinal_sira2 = data[row[1]]
            vc_length = len(self.visible_columns)
            if (colindex >= vc_length):
                colindex = colindex-vc_length
                if (colindex == vc_length):
                    return row[2]
                if (colindex == 0):
                    return str(row[1]) + "- " + orijinal_sira2[self.visible_columns[colindex]]
                return orijinal_sira2[self.visible_columns[colindex]]
            if (colindex == 0):
                return str(row[0]) + "- " + orijinal_sira1[self.visible_columns[colindex]]
            return orijinal_sira1[self.visible_columns[colindex]]

    def rowCount(self, index):
        # The length of the outer list.

        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self.visible_columns)*2 + 1


class Ui_Dialog(object):
    def __init__(self):
        self.visible_columns = ["Product"]
        self.searchText = ""
        self.gosterilecek_thread_times = []
        self.gosterilecek_data = []
        self.thread_sayisi = 1
        self.benzerlik_orani = 20
        self.benzerlik_orani_1 = 60

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1401, 798)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(10, 0, 361, 141))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 30, 171, 16))
        self.label.setText("")
        self.label.setObjectName("label")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 30, 341, 111))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setSizeConstraint(
            QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.searchable_column_combobox = QtWidgets.QComboBox(
            self.layoutWidget)
        self.searchable_column_combobox.setObjectName(
            "searchable_column_combobox")
        self.searchable_column_combobox.addItem("")
        self.searchable_column_combobox.addItem("")
        self.searchable_column_combobox.addItem("")
        self.searchable_column_combobox.addItem("")
        self.searchable_column_combobox.addItem("")
        self.searchable_column_combobox.addItem("")
        self.verticalLayout.addWidget(self.searchable_column_combobox)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.searchable_text_textbox = QtWidgets.QLineEdit(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.searchable_text_textbox.sizePolicy().hasHeightForWidth())
        self.searchable_text_textbox.setSizePolicy(sizePolicy)
        self.searchable_text_textbox.setMaximumSize(QtCore.QSize(16777215, 26))
        self.searchable_text_textbox.setReadOnly(False)
        self.searchable_text_textbox.setObjectName("searchable_text_textbox")
        self.verticalLayout.addWidget(self.searchable_text_textbox)
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(379, 13, 361, 131))
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_4 = QtWidgets.QLabel(self.groupBox_2)
        self.label_4.setGeometry(QtCore.QRect(10, 30, 171, 16))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 30, 258, 51))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_2.setSizeConstraint(
            QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_2.addWidget(self.label_5)
        self.first_column_combobox = QtWidgets.QComboBox(self.layoutWidget1)
        self.first_column_combobox.setObjectName("first_column_combobox")
        self.first_column_combobox.addItem("")
        self.first_column_combobox.addItem("")
        self.first_column_combobox.addItem("")
        self.first_column_combobox.addItem("")
        self.first_column_combobox.addItem("")
        self.first_column_combobox.addItem("")
        self.verticalLayout_2.addWidget(self.first_column_combobox)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(940, 270, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.filetableview = QtWidgets.QTableView(Dialog)
        self.filetableview.setGeometry(QtCore.QRect(10, 310, 721, 471))
        self.filetableview.setObjectName("filetableview")
        self.resulttableview = QtWidgets.QTableView(Dialog)
        self.resulttableview.setGeometry(QtCore.QRect(740, 310, 661, 471))
        self.resulttableview.setObjectName("resulttableview")
        self.splitter = QtWidgets.QSplitter(Dialog)
        self.splitter.setGeometry(QtCore.QRect(11, 151, 1021, 111))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.splitter.sizePolicy().hasHeightForWidth())
        self.splitter.setSizePolicy(sizePolicy)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.layoutWidget2 = QtWidgets.QWidget(self.splitter)
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_6 = QtWidgets.QLabel(self.layoutWidget2)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_3.addWidget(self.label_6)

        self.benzerlik_orani_1_textbox = QtWidgets.QLineEdit(
            self.layoutWidget2)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.benzerlik_orani_1_textbox.sizePolicy().hasHeightForWidth())
        self.benzerlik_orani_1_textbox.setSizePolicy(sizePolicy)
        self.benzerlik_orani_1_textbox.setObjectName(
            "benzerlik_orani_1_textbox")
        self.verticalLayout_3.addWidget(self.benzerlik_orani_1_textbox)

        self.benzerlik_orani_textbox = QtWidgets.QLineEdit(self.layoutWidget2)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.benzerlik_orani_textbox.sizePolicy().hasHeightForWidth())
        self.benzerlik_orani_textbox.setSizePolicy(sizePolicy)
        self.benzerlik_orani_textbox.setObjectName("benzerlik_orani_textbox")
        self.verticalLayout_3.addWidget(self.benzerlik_orani_textbox)

        self.label_7 = QtWidgets.QLabel(self.layoutWidget2)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_3.addWidget(self.label_7)
        self.thread_count_textbox = QtWidgets.QLineEdit(self.layoutWidget2)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.thread_count_textbox.sizePolicy().hasHeightForWidth())
        self.thread_count_textbox.setSizePolicy(sizePolicy)
        self.thread_count_textbox.setObjectName("thread_count_textbox")
        self.verticalLayout_3.addWidget(self.thread_count_textbox)
        self.layoutWidget3 = QtWidgets.QWidget(self.splitter)
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_8 = QtWidgets.QLabel(self.layoutWidget3)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_4.addWidget(self.label_8)
        self.second_column_combobox = QtWidgets.QComboBox(self.layoutWidget3)
        self.second_column_combobox.setObjectName("second_column_combobox")
        self.second_column_combobox.addItem("")
        self.second_column_combobox.addItem("")
        self.second_column_combobox.addItem("")
        self.second_column_combobox.addItem("")
        self.second_column_combobox.addItem("")
        self.second_column_combobox.addItem("")
        self.second_column_combobox.addItem("")
        self.verticalLayout_4.addWidget(self.second_column_combobox)
        self.label_9 = QtWidgets.QLabel(self.layoutWidget3)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_4.addWidget(self.label_9)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.proje_checkbox = QtWidgets.QCheckBox(self.layoutWidget3)
        self.proje_checkbox.setObjectName("proje_checkbox")
        self.proje_checkbox.setChecked(True)
        self.horizontalLayout.addWidget(self.proje_checkbox)
        self.issue_checkbox = QtWidgets.QCheckBox(self.layoutWidget3)
        self.issue_checkbox.setObjectName("issue_checkbox")
        self.horizontalLayout.addWidget(self.issue_checkbox)
        self.company_checkbox = QtWidgets.QCheckBox(self.layoutWidget3)
        self.company_checkbox.setObjectName("company_checkbox")
        self.horizontalLayout.addWidget(self.company_checkbox)
        self.state_checkbox = QtWidgets.QCheckBox(self.layoutWidget3)
        self.state_checkbox.setObjectName("state_checkbox")
        self.horizontalLayout.addWidget(self.state_checkbox)
        self.zip_ckeckbox = QtWidgets.QCheckBox(self.layoutWidget3)
        self.zip_ckeckbox.setObjectName("zip_ckeckbox")
        self.horizontalLayout.addWidget(self.zip_ckeckbox)
        self.complaintID_checkbox_2 = QtWidgets.QCheckBox(self.layoutWidget3)
        self.complaintID_checkbox_2.setObjectName("complaintID_checkbox_2")
        self.horizontalLayout.addWidget(self.complaintID_checkbox_2)
        self.all_checkbox = QtWidgets.QCheckBox(self.layoutWidget3)
        self.all_checkbox.setObjectName("all_checkbox")
        self.horizontalLayout.addWidget(self.all_checkbox)
        self.verticalLayout_4.addLayout(self.horizontalLayout)
        self.groupBox_3 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_3.setGeometry(QtCore.QRect(1049, 10, 351, 291))
        self.groupBox_3.setObjectName("groupBox_3")
        self.thread_zamanlar_listview = QtWidgets.QListView(self.groupBox_3)
        self.thread_zamanlar_model = QtGui.QStandardItemModel()
        self.thread_zamanlar_listview.setModel(self.thread_zamanlar_model)
        self.thread_zamanlar_listview.setGeometry(
            QtCore.QRect(10, 20, 331, 261))
        self.thread_zamanlar_listview.setObjectName("listView")
        self.retranslateUi(Dialog)
        self.relayEvents()
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.groupBox.setTitle(_translate("Dialog", "Aranak Değere Göre"))
        self.label_3.setText(_translate("Dialog", "Sütun Seçiniz"))
        self.label_2.setText(_translate("Dialog", "Aranacak değer"))
        self.groupBox_2.setTitle(_translate("Dialog", "Kıyaslanacak sütun"))
        self.label_5.setText(_translate("Dialog", "Sütun Seçiniz"))
        self.pushButton.setText(_translate("Dialog", "Ara"))
        self.label_6.setText(_translate("Dialog", "Benzerlik oranı"))
        self.label_7.setText(_translate("Dialog", "Thread sayısı"))
        self.label_8.setText(_translate("Dialog", "ikinici sütün"))
        self.label_9.setText(_translate("Dialog", "Gösterilecek sütünler"))
        self.proje_checkbox.setText(_translate("Dialog", "Product"))
        self.issue_checkbox.setText(_translate("Dialog", "Issue"))
        self.company_checkbox.setText(_translate("Dialog", "Company"))
        self.state_checkbox.setText(_translate("Dialog", "State"))
        self.zip_ckeckbox.setText(_translate("Dialog", "Zip"))
        self.complaintID_checkbox_2.setText(_translate("Dialog", "C. ID"))
        self.all_checkbox.setText(_translate("Dialog", "Tüm"))
        self.searchable_column_combobox.setItemText(
            0, _translate("Dialog", "Product"))
        self.searchable_column_combobox.setItemText(
            1, _translate("Dialog", "Issue"))
        self.searchable_column_combobox.setItemText(
            2, _translate("Dialog", "Company"))
        self.searchable_column_combobox.setItemText(
            3, _translate("Dialog", "State"))
        self.searchable_column_combobox.setItemText(
            4, _translate("Dialog", "ZIP code"))
        self.searchable_column_combobox.setItemText(
            5, _translate("Dialog", "Complaint ID"))
        self.first_column_combobox.setItemText(
            0, _translate("Dialog", "Product"))
        self.first_column_combobox.setItemText(
            1, _translate("Dialog", "Issue"))
        self.first_column_combobox.setItemText(
            2, _translate("Dialog", "Company"))
        self.first_column_combobox.setItemText(
            3, _translate("Dialog", "State"))
        self.first_column_combobox.setItemText(
            4, _translate("Dialog", "ZIP code"))
        self.first_column_combobox.setItemText(
            5, _translate("Dialog", "Complaint ID"))
        self.second_column_combobox.setItemText(
            0, _translate("Dialog", "Product"))
        self.second_column_combobox.setItemText(
            1, _translate("Dialog", "Issue"))
        self.second_column_combobox.setItemText(
            2, _translate("Dialog", "Company"))
        self.second_column_combobox.setItemText(
            3, _translate("Dialog", "State"))
        self.second_column_combobox.setItemText(
            4, _translate("Dialog", "ZIP code"))
        self.second_column_combobox.setItemText(
            5, _translate("Dialog", "Complaint ID"))
        self.second_column_combobox.setItemText(6, _translate("Dialog", "Yok"))
        self.second_column_combobox.setCurrentIndex(6)
        self.groupBox_3.setTitle(_translate("Dialog", "Thread zamanları"))

    def relayEvents(self):
        self.benzerlik_orani_textbox.setText("20")
        self.benzerlik_orani_1_textbox.setText("60")
        self.thread_count_textbox.setText("1")
        self.benzerlik_orani_textbox.textChanged.connect(
            self.benzerlik_orani_changed)
        self.benzerlik_orani_1_textbox.textChanged.connect(
            self.benzerlik_orani_1_changed)
        self.thread_count_textbox.textChanged.connect(
            self.threadsayisi_changed)
        self.first_column_combobox.currentIndexChanged.connect(
            self.first_column_selection_changed)
        self.pushButton.clicked.connect(self.search)
        self.searchable_text_textbox.textChanged.connect(
            self.searchTextChanged)

    def searchTextChanged(self):
        self.searchText = self.searchable_text_textbox.text().strip()

    def search(self):
        self.visible_columns = []
        if self.proje_checkbox.isChecked():
            self.visible_columns.append("Product")
        if self.issue_checkbox.isChecked():
            self.visible_columns.append("Issue")
        if self.company_checkbox.isChecked():
            self.visible_columns.append("Company")
        if self.state_checkbox.isChecked():
            self.visible_columns.append("State")
        if self.zip_ckeckbox.isChecked():
            self.visible_columns.append("ZIP Code")
        if self.complaintID_checkbox_2.isChecked():
            self.visible_columns.append("Complaint ID")

        resultData = []
        fileData = []
        self.thread_zamanlar_model.clear()
        self.resulttableview.setModel(ResultsTableModel(
            [], self.first_column_combobox, self.second_column_combobox, self.visible_columns))
        if self.searchText is None or len(self.searchText) == 0:
            resultData = data
            fileData = data
            a = 1
            self.thread_runner(data)
        else:
            for dataItem in data:
                combobox = self.searchable_column_combobox
                first_col_value = str(
                    dataItem[columns[combobox.currentIndex()]])
                if self.searchText in first_col_value:
                    resultData.append(dataItem)
                    fileData.append(dataItem)

        self.filetableview.setModel(FileTableModel(fileData))
        if (self.second_column_combobox.currentIndex() == 6):
            self.thread_runner(resultData)
        else:
            products_dict = {}
            for dataItem in data:
                combobox = self.first_column_combobox
                first_col_value = str(
                    dataItem[columns[combobox.currentIndex()]])
                if first_col_value not in products_dict:
                    products_dict[first_col_value] = []
                products_dict[first_col_value].append(dataItem)
            for k in products_dict:
                self.thread_runner(products_dict[k])

    def benzerlik_orani_changed(self):
        try:
            self.benzerlik_orani = int(self.benzerlik_orani_textbox.text())
        except:
            pass

    def benzerlik_orani_1_changed(self):
        try:
            self.benzerlik_orani = int(self.benzerlik_orani_1_textbox.text())
        except:
            pass

    def threadsayisi_changed(self):
        try:
            self.thread_sayisi = float(self.thread_count_textbox.text())
        except:
            pass

    def first_column_selection_changed(self, i):
        # print(i)
        self.benzerlik_orani_1 = int(self.benzerlik_orani_1_textbox.text())
        print(self.benzerlik_orani_1)
        pass

    # def mp_runner(self, csv_data, first_col, second_col):
    #    start = time.time()
    #    with mp.Pool(processes=4) as p:
    #        # İlk 100 satırı 100 satırla kıyaslıyor
    #        for i in range(0, 1):
    #            p.apply_async(compare_rows, args=(
    #                csv_data, i * 10, (i + 1) * 10, 100, first_col, second_col))
    #        print(f"Multiprocess Time: {time.time() - start:.04f} sec.")

    def thread_runner(self, csv_data):
        """

        :type csv_data: pandas.DataFrame
        """
        step = 100
        for i in range(0, len(csv_data), step):

            second_col_index = None
            if self.second_column_combobox.currentIndex() != 6:
                second_col_index = self.second_column_combobox.currentIndex()
            # tup = self.compare_rows(csv_data, i, max(i + step, len(csv_data)), len(csv_data),
#                                    self.first_column_combobox.currentIndex(), second_col_index, self.benzerlik_orani, str(i))
          #  self.updateTables(tup)
            with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:
                t = executor.submit(self.compare_rows, csv_data, i, max(i + step, len(csv_data)), len(csv_data),
                                    self.first_column_combobox.currentIndex(), second_col_index, self.benzerlik_orani, str(i))
            # t.add_done_callback(self.updateTables)
                self.updateTables(t)
        # for x in as_completed(threads):

    def updateTables(self, future):
        tup = future.result()
        benzerlik_results = tup[0]
        thread_zaman = tup[1]
        sitem = QtGui.QStandardItem(str(thread_zaman))
        self.thread_zamanlar_model.appendRow(sitem)
        eskimodel = self.resulttableview.model()
        r = benzerlik_results
        if isinstance(eskimodel, ResultsTableModel):
            r = benzerlik_results + eskimodel._data
        m = ResultsTableModel(r, self.first_column_combobox,
                              self.second_column_combobox, self.visible_columns)
        self.resulttableview.setModel(m)

    def compare_rows(self, data, start_index, end_index, max_index, first_col_index, second_col_index, benzerlik_orani,
                     name):
        if second_col_index is not None:
            first_col_index = second_col_index
        print('Working thread:', threading.current_thread().ident,
              '--', start_index, '-', end_index)
        start = time.time()
        benzerlik_orani = self.benzerlik_orani
        benzerlik_orani_1 = self.benzerlik_orani_1
        # Compare first 100 rows with 100 rows
        result = []
        for i in range(start_index, end_index):

            try:
                first_word = data[i][columns[first_col_index]].split()
            except:
                break

            for j in range(i + 1, max_index):
                second_word = data[j][columns[first_col_index]].split()

                def choose_longer(x, y):
                    return x if x >= y else y

                longer_line = choose_longer(len(first_word), len(second_word))

                dup_counter = len(set(first_word) & set(second_word))
                ratio = dup_counter / longer_line * 100
                id1 = data[i]["ID"]
                id2 = data[j]["ID"]
                if benzerlik_orani > 0:
                    if ratio >= benzerlik_orani:
                        if (second_col_index is not None):
                            result.append((id1, id2, ratio))
                        else:
                            result.append((i, j, ratio))
                if benzerlik_orani == 0:
                    if ratio >= benzerlik_orani_1:
                        if (second_col_index is not None):
                            result.append((id1, id2, ratio))
                        else:
                            result.append((i, j, ratio))

        end = time.time()
        to_return = (result, end - start)

        return to_return
        # return_second_col = compare_second(
        #    data, i, j, second_ratio, second_col)
        #
        # if return_second_col is not None and (return_second_col >= second_ratio):
        #    print(f'[{i}][{j}] Same {first_col} and {second_col} Ratio: {return_second_col:.02f}% ----',
        #          data['Complaint ID'].get(i), '-', data['Complaint ID'].get(j))
        #
        #    print(f'{third_col}:', data[third_col].get(
        #        i), '-', data[third_col].get(j), '\n', '--------------')
        #    a = 1

        # elif ratio > first_ratio and ratio < 100:
        #     print(f'[{i}][{j}]', str(ratio), '\n')
        #     a = 1

        # logging.info(f'{name} FINISHED')
        print(f"Products Compare Time: {time.time() - start:.04f} sec.")


def compare_second(data, first_index, second_index, target_ratio, col_name):

    data[col_name].str.lower()

    first_word = data[col_name].get(first_index).split()
    second_word = data[col_name].get(second_index).split()

    def choose_longer(x, y): return x if x >= y else y

    longer_line = choose_longer(len(first_word), len(second_word))

    dup_counter = len(set(first_word) & set(second_word))
    ratio = dup_counter / longer_line * 100

    if ratio >= target_ratio:
        # print(f'[{i}][{j}] Issue ratio:', str(second_ratio))
        return ratio

    # print(f"Issues Compare Time: {time.time()-start:.04f} sec.")


def search_with_value(searching_column, searching_value, second_col, start_index, end_index):
    start = time.time()
    print('Working thread:', threading.current_thread().ident,
          '--', start_index, '-', end_index)
    second_col_ratio = 50
    index = 0

    # Match Complaint ID and get index
    if index == 0:
        for i in range(len(data.index)):
            if data[searching_column].get(i) == str(searching_value):
                index = i
        data[second_col].str.lower()

        # Compare Issues with 1 index
    for j in range(start_index, end_index):
        if j != index:
            first_word = data[second_col].get(index).split()
            second_word = data[second_col].get(j).split()

            def choose_longer(x, y):
                return x if x >= y else y
            compare_second(0,100,50,second_col)
            longer_line = choose_longer(len(first_word), len(second_word))

            dup_counter = len(set(first_word) & set(second_word))
            ratio = dup_counter / longer_line * 100

            if ratio >= second_col_ratio:
                print(f'[{index}][{j}] -', ratio)
    end = time.time()
    print(f"Compare with Value Time: {end - start:.04f} sec.")


# complaint_id()

if __name__ == '__main__':
    data = pandas.read_csv("old_data.csv",nrows=1000,
                           header=0,
                           names=columns).to_dict("records")
    i = 0
    for d in data:
        d["ID"] = i
        i = i+1
    app = QApplication(sys.argv)
    window = QDialog()
    d = Ui_Dialog()
    d.setupUi(window)
    window.show()
    sys.exit(app.exec_())
